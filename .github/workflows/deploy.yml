name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 80:80

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python for Flask app
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Step 3: Install dependencies for Flask app
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install Flask

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 5: Build Flask app Docker image
      - name: Build Flask app Docker image
        run: |
          docker build -t flaskapp:v1 -f Dockerfile .

      # Step 6: Build Nginx Docker image
      - name: Build Nginx Docker image
        run: |
          echo "Building Nginx image with the proxy configuration"
          docker build -t nginx-app -f nginx.Dockerfile .

      # Step 7: Run docker-compose to test locally
      - name: Test Docker Compose
        run: |
          docker-compose up -d
          sleep 5
          curl http://localhost | grep "Hello, DevOps World!"
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Push Flask app Docker image to ECR
      - name: Push Flask app to ECR
        run: |
          docker tag flaskapp:v1 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flaskapp:v1
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/flaskapp:v1

      # Step 5: Push Nginx Docker image to ECR
      - name: Push Nginx app to ECR
        run: |
          docker tag nginx-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nginx-app:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/nginx-app:latest